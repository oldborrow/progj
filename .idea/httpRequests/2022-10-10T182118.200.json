[
  {
    "id": 2,
    "title": "5 этапов оптического распознавания символов на практике",
    "preview_text": "Создали пет-проект на React, который может озвучивать любой текстовый контент и делать из этого что-то наподобие подкастов.",
    "content": "Меня зовут Антон Малыгин. Я iOS-разработчик с опытом работы около 10 лет.\n\nНа протяжении всей карьеры я всегда занимался своими пет-проектам, собственно, после одного такого проекта, эта карьера и началась.\n\nКакие-то из них доходили до релиза и успешно работали, один даже сейчас работает. Какие-то или вообще не видели свет, или видели его недолго.\n\nДа, мне не удалось заработать миллионы, создать успешный стартап, но я получил ценный опыт, в том числе и в разработке с другой стороны — backend.\n\nСегодня я расскажу как раз про такой проект, который мы смогли довести до релиза, но прожил он недолго.\n\nИдея\nДело было в 2018 году. Каждые выходные я ездил за рулем по разным делам и слушал радио или музыку, что, в конце концов, надоедало, и хотелось послушать что-то интеллектуальное или интересное. В метро по пути на работу я обычно читаю: статьи на разные темы, новости и т.д. В это же время, мы с коллегой думали над разными идеями своего проекта, перебирали, обсуждали. И вот примерно таким образом родилась идея — озвучивать любой текстовый контент и делать из этого что-то наподобие приложения подкастов.\n\nМы разделились так — я делал backend, коллега — мобильные клиенты на ReactNative и web-версию на React.\n\nПервая версия\nК тому моменту у меня был опыт Scala/Go на других пет-проектах. Поэтому стек был выбран именно такой.\n\n\nМне нравится использовать в своих проектах новые методики, недоступные в обычной работе, извлекая профессиональную пользу из проекта. Поэтому было принято решение разделить проект на микросервисы, используя Docker. Получилась примерно такая схема, где каждый модуль, кроме Text-to-Speech, — это отдельное приложение в контейнере.\nAPI — основной модуль, который непосредственно разрабатывался мной. Основной стек — Scala, PlayFramework, Akka.\n\nЭто единое приложение, которое состояло из нескольких частей:\n\nAPI — обычный RestAPI, обработка http запросов, выдача ответов.\nПростенький Crawler, который получал из БД список сайтов, по которым надо пройтись (новости, статьи) и достать оттуда нужный контент — текст, картинку, краткое описание.\nСервис для работы с Text-to-Speech от разных провайдеров.\nПервые проблемы начались при создании парсера. Сначала мы хотели просто сделать парсинг нескольких сайтов, что я сделал с помощью scala-scraper. Но, во-первых, писать парсер под каждый сайт — плохо масштабируемое решение, а во-вторых, мы придумали фичу, когда пользователь может озвучить самостоятельно любую статью или новость, с любого сайта. Поэтому нам нужно было универсальное решение. Лучшее, что мы смогли найти — это readability.\n\nТаким образом, я создал отдельный сервис в докер-контейнере на основе readability.\n\nОн устроен так: на вход ему передается html-страница, после чего он возвращает чистый текст статьи или новости, естественно, без тегов и любой лишней информации.\n\nСледующая задача — озвучить текст. Здесь можно выделить 3 проблемы:\n\nУ каждого API TTS есть ограничение на размер текста для одного запроса.\nНе каждый сервис мог отдавать mp3, например, с ogg были проблемы со стандартным плеером на клиентах.\nКроме конвертации в нужный формат, нужно было склеить озвученные части в один файл.\nПервое, что нужно сделать после получения текста — разбить его на цельные части, состоящие из одного или нескольких предложений. Для этого я использовал очень полезный пакет icu4j. Пример кода из проекта.",
    "author_id": 1
  },
  {
    "id": 3,
    "title": "Пишем гибридное приложение для хранения заметок на Django, Django Ninja REST Framework и Alpine.js",
    "preview_text": "Изучаем основные возможности Django Ninja, Alpine.js и Axios в процессе создания веб-приложения для хранения заметок.",
    "content": "папапапапап опа давай давай и раз оп давай давай и хаха хах хаха",
    "author_id": 1
  }
]